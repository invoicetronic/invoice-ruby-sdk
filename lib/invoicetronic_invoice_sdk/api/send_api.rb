=begin
#Italian eInvoice API

#The Italian eInvoice API is a RESTful API that allows you to send and receive invoices through the Italian [Servizio di Interscambio (SDI)][1], or Interchange Service. The API is designed by Invoicetronic to be simple and easy to use, abstracting away SDI complexity while still providing complete control over the invoice send/receive process. The API also provides advanced features and a rich toolchain, such as invoice validation, multiple upload methods, webhooks, event logs, CORS support, client SDKs for commonly used languages, and CLI tools.  For more information, see  [Invoicetronic website][2]  [1]: https://www.fatturapa.gov.it/it/sistemainterscambio/cose-il-sdi/ [2]: https://invoicetronic.com/

The version of the OpenAPI document: 1.0.0
Contact: support@invoicetronic.com
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module Invoice_Sdk
  class SendApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add a send invoice by file
    # Send invoices are the invoices that are sent to the SDI.
    # @param files [Array<File>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [ModelSend]
    def invoice_v1_send_files_post(files, opts = {})
      data, _status_code, _headers = invoice_v1_send_files_post_with_http_info(files, opts)
      data
    end

    # Add a send invoice by file
    # Send invoices are the invoices that are sent to the SDI.
    # @param files [Array<File>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def invoice_v1_send_files_post_with_http_info(files, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_files_post ...'
      end
      # verify the required parameter 'files' is set
      if @api_client.config.client_side_validation && files.nil?
        fail ArgumentError, "Missing the required parameter 'files' when calling SendApi.invoice_v1_send_files_post"
      end
      # resource path
      local_var_path = '/invoice/v1/send/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['files'] = @api_client.build_collection_param(files, :multi)

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_files_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_files_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List send invoices
    # test **markdown**.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id.
    # @option opts [String] :identifier SDI identifier.
    # @option opts [String] :committente VAT number or fiscal code.
    # @option opts [String] :prestatore VAT number or fiscal code.
    # @option opts [String] :file_name File name.
    # @option opts [Time] :last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [String] :document_number Document number.
    # @option opts [Integer] :page Page number. (default to 1)
    # @option opts [Integer] :page_size Items per page. (default to 100)
    # @return [Array<ModelSend>]
    def invoice_v1_send_get(opts = {})
      data, _status_code, _headers = invoice_v1_send_get_with_http_info(opts)
      data
    end

    # List send invoices
    # test **markdown**.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :company_id Company id.
    # @option opts [String] :identifier SDI identifier.
    # @option opts [String] :committente VAT number or fiscal code.
    # @option opts [String] :prestatore VAT number or fiscal code.
    # @option opts [String] :file_name File name.
    # @option opts [Time] :last_update_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :last_update_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :date_sent_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_from UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [Time] :document_date_to UTC ISO 8601 (2024-11-29T12:34:56Z)
    # @option opts [String] :document_number Document number.
    # @option opts [Integer] :page Page number. (default to 1)
    # @option opts [Integer] :page_size Items per page. (default to 100)
    # @return [Array<(Array<ModelSend>, Integer, Hash)>] Array<ModelSend> data, response status code and response headers
    def invoice_v1_send_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_get ...'
      end
      # resource path
      local_var_path = '/invoice/v1/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'identifier'] = opts[:'identifier'] if !opts[:'identifier'].nil?
      query_params[:'committente'] = opts[:'committente'] if !opts[:'committente'].nil?
      query_params[:'prestatore'] = opts[:'prestatore'] if !opts[:'prestatore'].nil?
      query_params[:'file_name'] = opts[:'file_name'] if !opts[:'file_name'].nil?
      query_params[:'last_update_from'] = opts[:'last_update_from'] if !opts[:'last_update_from'].nil?
      query_params[:'last_update_to'] = opts[:'last_update_to'] if !opts[:'last_update_to'].nil?
      query_params[:'date_sent_from'] = opts[:'date_sent_from'] if !opts[:'date_sent_from'].nil?
      query_params[:'date_sent_to'] = opts[:'date_sent_to'] if !opts[:'date_sent_to'].nil?
      query_params[:'document_date_from'] = opts[:'document_date_from'] if !opts[:'document_date_from'].nil?
      query_params[:'document_date_to'] = opts[:'document_date_to'] if !opts[:'document_date_to'].nil?
      query_params[:'document_number'] = opts[:'document_number'] if !opts[:'document_number'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/problem+json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ModelSend>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a send invoice by id
    # Send invoices are the invoices that are sent to the SDI.
    # @param id [Integer] Item id.
    # @param [Hash] opts the optional parameters
    # @return [ModelSend]
    def invoice_v1_send_id_get(id, opts = {})
      data, _status_code, _headers = invoice_v1_send_id_get_with_http_info(id, opts)
      data
    end

    # Get a send invoice by id
    # Send invoices are the invoices that are sent to the SDI.
    # @param id [Integer] Item id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def invoice_v1_send_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SendApi.invoice_v1_send_id_get"
      end
      # resource path
      local_var_path = '/invoice/v1/send/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a send invoice by json
    # Send invoices are the invoices that are sent to the SDI.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [ModelSend]
    def invoice_v1_send_json_post(fattura_ordinaria, opts = {})
      data, _status_code, _headers = invoice_v1_send_json_post_with_http_info(fattura_ordinaria, opts)
      data
    end

    # Add a send invoice by json
    # Send invoices are the invoices that are sent to the SDI.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def invoice_v1_send_json_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_json_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.invoice_v1_send_json_post"
      end
      # resource path
      local_var_path = '/invoice/v1/send/json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_json_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_json_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a send invoice
    # Send invoices are the invoices that are sent to the SDI.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [ModelSend]
    def invoice_v1_send_post(model_send, opts = {})
      data, _status_code, _headers = invoice_v1_send_post_with_http_info(model_send, opts)
      data
    end

    # Add a send invoice
    # Send invoices are the invoices that are sent to the SDI.
    # @param model_send [ModelSend] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def invoice_v1_send_post_with_http_info(model_send, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_post ...'
      end
      # verify the required parameter 'model_send' is set
      if @api_client.config.client_side_validation && model_send.nil?
        fail ArgumentError, "Missing the required parameter 'model_send' when calling SendApi.invoice_v1_send_post"
      end
      # resource path
      local_var_path = '/invoice/v1/send'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(model_send)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a send invoice by xml
    # Send invoices are the invoices that are sent to the SDI.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [ModelSend]
    def invoice_v1_send_xml_post(fattura_ordinaria, opts = {})
      data, _status_code, _headers = invoice_v1_send_xml_post_with_http_info(fattura_ordinaria, opts)
      data
    end

    # Add a send invoice by xml
    # Send invoices are the invoices that are sent to the SDI.
    # @param fattura_ordinaria [FatturaOrdinaria] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate Validate the document first, and reject it on failure. (default to false)
    # @return [Array<(ModelSend, Integer, Hash)>] ModelSend data, response status code and response headers
    def invoice_v1_send_xml_post_with_http_info(fattura_ordinaria, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendApi.invoice_v1_send_xml_post ...'
      end
      # verify the required parameter 'fattura_ordinaria' is set
      if @api_client.config.client_side_validation && fattura_ordinaria.nil?
        fail ArgumentError, "Missing the required parameter 'fattura_ordinaria' when calling SendApi.invoice_v1_send_xml_post"
      end
      # resource path
      local_var_path = '/invoice/v1/send/xml'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/xml'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(fattura_ordinaria)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelSend'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Basic']

      new_options = opts.merge(
        :operation => :"SendApi.invoice_v1_send_xml_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendApi#invoice_v1_send_xml_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
